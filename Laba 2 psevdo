
**Класс Record**  
Атрибуты:  
1. **date** – строка  
2. **temp** – число с плавающей точкой (инициализировано нулём)  

Методы класса:  
1. **setDate(d)**  
  • Сохранить значение *d* в атрибуте **date**.  
2. **setTemp(t)**  
  • Сохранить значение *t* в атрибуте **temp**.  
3. **getDate()**  
  • Вернуть значение **date**.  
4. **getTemp()**  
  • Вернуть значение **temp**.  
5. **ReadFromFile(filename, n)**  
  1. Создать массив **records** из *n* элементов.  
  2. Открыть текстовый файл с именем **filename**.  
  3. Если файл не открыт:  
    • Вывести сообщение об ошибке.  
    • Удалить массив **records**.  
    • Вернуть **null**.  
  4. Для каждого индекса *i* от 0 до *n – 1*:  
    • Считать из файла строку (дату) и число (температуру) в **records[i]**.  
  5. Закрыть файл.  
  6. Вернуть массив **records**.  
  7. Конец функции.  
6. **ReadFromBinaryFile(filename, n)**  
  1. Создать массив **records** из *n* элементов.  
  2. Открыть бинарный файл с именем **filename**.  
  3. Если файл не открыт:  
    • Вывести сообщение об ошибке.  
    • Удалить массив **records**.  
    • Вернуть **null**.  
  4. Для каждого индекса *i* от 0 до *n – 1*:  
    • Считать 10 символов – буфер для даты.  
    • Преобразовать буфер в строку и удалить лишние пробелы справа.  
    • Считать значение температуры (тип double).  
    • Сохранить дату и температуру в **records[i]** с помощью setDate и setTemp.  
  5. Закрыть файл.  
  6. Вернуть массив **records**.  
  7. Конец функции.  
7. **CalculationOutput(array, n)**  
  1. Если *array* равен **null** или *n* ≤ 0:  
    • Вывести сообщение об ошибке.  
    • Вернуть пустой объект Record.  
  2. Установить **minRecord** равным первому элементу массива.  
  3. Для каждого индекса *i* от 1 до *n – 1*:  
    • Если **array[i].getTemp()** меньше **minRecord.getTemp()**, то  
      – Обновить **minRecord** значением **array[i]**.  
  4. Вернуть **minRecord**.  
  5. Конец функции.

---

**Вспомогательные функции для работы с массивом записей:**

1. **AddRecord(array, n, newRecord)**  
  1. Создать новый массив **newArr** размером *n + 1*.  
  2. Для каждого индекса *i* от 0 до *n – 1*:  
    • Скопировать **array[i]** в **newArr[i]**.  
  3. Поместить **newRecord** в **newArr[n]**.  
  4. Удалить старый массив **array**.  
  5. Увеличить *n* на 1.  
  6. Вернуть новый массив **newArr**.  
  7. Конец функции.

2. **RemoveRecord(array, n, index)**  
  1. Если *index* меньше 0 или больше или равен *n*:  
    • Вывести сообщение «Неверный индекс!».  
    • Вернуть исходный массив **array**.  
  2. Создать новый массив **newArr** размером *n – 1*.  
  3. Для каждого индекса *i* от 0 до *n – 1*:  
    • Если *i* равен *index*, пропустить текущую итерацию.  
    • Иначе скопировать **array[i]** в **newArr** (индекс нового массива увеличивать отдельно).  
  4. Удалить старый массив **array**.  
  5. Уменьшить *n* на 1.  
  6. Вернуть новый массив **newArr**.  
  7. Конец функции.

3. **FileSize(file)**  
  1. Переместить указатель чтения файла в конец.  
  2. Получить и вернуть текущее положение указателя (размер файла в байтах).  
  3. Конец функции.

4. **WriteRecordsToTextFile(filename, records, n)**  
  1. Открыть файл с именем **filename** для записи в текстовом формате.  
  2. Если файл не открыт:  
    • Вывести сообщение об ошибке.  
    • Завершить функцию.  
  3. Для каждого индекса *i* от 0 до *n – 1*:  
    • Записать **records[i]** (дата и температура) в файл.  
  4. Закрыть файл.  
  5. Вывести сообщение об успешной записи.  
  6. Конец функции.

5. **WriteRecordsToBinaryFile(filename, records, n)**  
  1. Открыть файл с именем **filename** для записи в бинарном формате.  
  2. Если файл не открыт:  
    • Вывести сообщение об ошибке.  
    • Завершить функцию.  
  3. Для каждого индекса *i* от 0 до *n – 1*:  
    • Получить дату из **records[i]**.  
    • Если длина даты меньше 10 символов, дополнить пробелами; если больше – обрезать до 10 символов.  
    • Записать дату (10 символов) в файл.  
    • Записать значение температуры (тип double) в файл.  
  4. Закрыть файл.  
  5. Вывести сообщение об успешной записи.  
  6. Конец функции.

---

**Основная программа (main):**

1. **Настройка консоли:**  
  • Установить кодировку ввода и вывода (например, SetConsoleCP, SetConsoleOutputCP).

2. **Выбор метода ввода данных:**  
  1. Вывести сообщение с выбором:  
    – «1 - Чтение из текстового файла»  
    – «2 - Чтение из бинарного файла»  
  2. Считать выбор пользователя (переменная **choice**).  
  3. Если **choice** = 1:  
    • Запросить у пользователя количество строк *n*.  
    • Запросить имя текстового файла.  
    • Вызвать функцию **ReadFromFile(filename, n)** для чтения записей.  
  4. Иначе если **choice** = 2:  
    • Запросить у пользователя количество записей *n*.  
    • Запросить имя бинарного файла.  
    • Вызвать функцию **ReadFromBinaryFile(filename, n)** для чтения записей.  
  5. Если результат чтения равен **null**:  
    • Вывести сообщение об ошибке.  
    • Завершить программу.

3. **Работа с данными через меню:**  
  1. Организовать цикл, который повторяется до выбора пункта выхода (например, пункт 8).  
  2. На каждой итерации вывести следующее меню:  
    – «1. Вывод входных данных на экран»  
    – «2. Расчёт и вывод записи с минимальной температурой»  
    – «3. Добавление новой записи в конец массива»  
    – «4. Удаление записи по номеру»  
    – «5. Запись массива данных в текстовый файл»  
    – «6. Запись массива данных в бинарный файл»  
    – «7. Расчёт размера файла»  
    – «8. Выход»  
  3. Считать выбор пользователя (переменная **choice2**).  
  4. В зависимости от выбора:  
    • Если **choice2** = 1:  
      – Для каждого индекса *i* от 0 до *n – 1* вывести **records[i]** на экран.  
    • Если **choice2** = 2:  
      – Вызвать функцию **CalculationOutput(records, n)** для нахождения записи с минимальной температурой.  
      – Вывести полученную запись.  
    • Если **choice2** = 3:  
      – Запросить у пользователя новую дату и температуру.  
      – Создать новый объект записи с введёнными данными.  
      – Вызвать функцию **AddRecord(records, n, newRecord)** для добавления записи в массив.  
      – Вывести сообщение об успешном добавлении.  
    • Если **choice2** = 4:  
      – Запросить номер записи для удаления (нумерация с 1).  
      – Преобразовать номер в индекс (номер – 1).  
      – Вызвать функцию **RemoveRecord(records, n, index)** для удаления записи.  
      – Вывести сообщение об удалении.  
    • Если **choice2** = 5:  
      – Запросить имя выходного файла для текстовой записи.  
      – Вызвать функцию **WriteRecordsToTextFile(outFilename, records, n)**.  
    • Если **choice2** = 6:  
      – Запросить имя выходного файла для бинарной записи.  
      – Вызвать функцию **WriteRecordsToBinaryFile(outFilename, records, n)**.  
    • Если **choice2** = 7:  
      – Запросить имя файла для определения его размера.  
      – Открыть указанный файл.  
      – Если файл открыт, вызвать функцию **FileSize(file)** и вывести размер файла в байтах.  
      – Иначе, вывести сообщение об ошибке открытия файла.  
    • Если **choice2** = 8:  
      – Вывести сообщение о выходе и завершить цикл.  
    • Если выбор не соответствует ни одному пункту:  
      – Вывести сообщение «Неверный выбор! Попробуйте снова.»  

4. **Завершение работы:**  
  • Освободить выделенную память для массива **records**.  
  • Завершить программу.
